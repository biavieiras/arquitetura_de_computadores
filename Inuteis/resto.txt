# x <- X % memory[address]

## 1: PC <- PC + 1; fetch; goto 2
firmware[1] = 0b00010010_000_00110101_001000_001_001

## 2: MAR <- MBR; read; goto 3
firmware[2] = 0b000001000_000_00010100_100000_010_010

## 3: H <- MDR; GOTO 4
firmware[3] = 0b00001011000000010100000001000000

## X <- X - H; if X - H < 0 GOTO 4 + 256; else 4
firmware[4] = 0b00010011101000111111000100000011

### [295] X é menor que 0
## X <- X + H; GOTO 0
firmware[260] = 0b00000000000000111100000100000011

## 5: X <- X + H 
7/3 = 7-3-3 = 1
r = 2

1: if Y-H < 0 goto 3; goto 2
2: Y <- Y - H goto 1
3: X <- Y goto 4 + 256
260: vá para a proxima instrução



'''
# x <- X // memory[address]

## 27: PC <- PC + 1; fetch; goto 28
firmware[27] = 0b000011100_000_00110101_001000_001_001

## 28: MAR <- MBR; read; goto 29
firmware[28] = 0b000011101_000_00010100_100000_010_010

## 29: H <- MDR; GOTO 30
firmware[29] = 0b000011110_000_00010100_000001_000_000

## 30: Y <- X; GOTO 31
firmware[30] = 0b000011111_000_00010100_000010_000_011

## 31: X <- 0; GOTO 32
firmware[31] = 0b000100000_000_00010000_000100_000_000
## 32: if Y-H == 0 goto 33 +256; else goto 33
firmware[32] = 0b000100001_001_00111111_000000_000_100

## 33: if Y - H < 0 GOTO 34 + 256; else GOTO 34
firmware[33] = 0b000100010_010_00111111_000000_000_100
## Y <- Y - H; if Y - H < 0 GOTO 35 + 256; else GOTO 35
##firmware[33] = 0b000100011_010_00111111_000010_000_100

## 34: Y <- Y - H goto 35
firmware[34] = 0b000100011_000_00111111_000010_000_100

## 289: Y <- Y - H goto 35
firmware[289] = 0b000100011_000_00111111_000010_000_100

## 35: X <- X + 1 goto 32;
firmware[35] = 0b000100000_000_00110101_000100_000_011

## [290] vá para a próxima instrução
firmware[290] = 0b000000000_100_00110101_001000_001_001
#firmware[290] = 0b000000000_100_00110101_001000_001_001
#firmware[283] = 0b000000000_100_00110101_001000_001_001

'''